/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateFoodStockArgs } from "./CreateFoodStockArgs";
import { UpdateFoodStockArgs } from "./UpdateFoodStockArgs";
import { DeleteFoodStockArgs } from "./DeleteFoodStockArgs";
import { FoodStockCountArgs } from "./FoodStockCountArgs";
import { FoodStockFindManyArgs } from "./FoodStockFindManyArgs";
import { FoodStockFindUniqueArgs } from "./FoodStockFindUniqueArgs";
import { FoodStock } from "./FoodStock";
import { FoodStockService } from "../foodStock.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FoodStock)
export class FoodStockResolverBase {
  constructor(
    protected readonly service: FoodStockService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FoodStock",
    action: "read",
    possession: "any",
  })
  async _foodStocksMeta(
    @graphql.Args() args: FoodStockCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FoodStock])
  @nestAccessControl.UseRoles({
    resource: "FoodStock",
    action: "read",
    possession: "any",
  })
  async foodStocks(
    @graphql.Args() args: FoodStockFindManyArgs
  ): Promise<FoodStock[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FoodStock, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FoodStock",
    action: "read",
    possession: "own",
  })
  async foodStock(
    @graphql.Args() args: FoodStockFindUniqueArgs
  ): Promise<FoodStock | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FoodStock)
  @nestAccessControl.UseRoles({
    resource: "FoodStock",
    action: "create",
    possession: "any",
  })
  async createFoodStock(
    @graphql.Args() args: CreateFoodStockArgs
  ): Promise<FoodStock> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FoodStock)
  @nestAccessControl.UseRoles({
    resource: "FoodStock",
    action: "update",
    possession: "any",
  })
  async updateFoodStock(
    @graphql.Args() args: UpdateFoodStockArgs
  ): Promise<FoodStock | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FoodStock)
  @nestAccessControl.UseRoles({
    resource: "FoodStock",
    action: "delete",
    possession: "any",
  })
  async deleteFoodStock(
    @graphql.Args() args: DeleteFoodStockArgs
  ): Promise<FoodStock | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
